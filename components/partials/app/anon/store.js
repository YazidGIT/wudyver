// components/partials/app/anon/store.js
import { createSlice } from '@reduxjs/toolkit';

// Define the initial state for the anonymous chat feature
const initialState = {
  nickname: "",         // User's nickname
  partner: null,        // Partner's nickname in the chat
  messages: [],         // Array to store chat messages
  isConnecting: false,  // Flag to indicate if currently searching for a partner
  isConnected: false,   // Flag to indicate if connected to a chat partner
};

// Create a Redux slice for anonymous chat
const anonymousChatSlice = createSlice({
  name: 'anonymousChat', // Name of the slice, used as a prefix for action types
  initialState,         // The initial state defined above
  reducers: {
    // Action to set the user's nickname
    setNickname: (state, action) => {
      state.nickname = action.payload;
    },
    // Action to initiate the chat connection process
    startChat: (state) => {
      state.isConnecting = true;  // Set connecting flag to true
      state.isConnected = false;  // Ensure not connected yet
      state.partner = null;       // Clear partner info
      state.messages = [];        // Clear previous messages
    },
    // Action dispatched when a chat partner is found
    partnerFound: (state, action) => {
      state.isConnecting = false; // No longer connecting
      state.isConnected = true;   // Now connected
      state.partner = action.payload; // Set the partner's nickname
    },
    // Action dispatched when no partner is found
    noPartner: (state) => {
      state.isConnecting = false; // No longer connecting
      state.isConnected = false;  // Not connected
    },
    // Action to send a message (adds to local messages array)
    sendMessage: (state, action) => {
      state.messages.push(action.payload); // Add the new message to the messages array
    },
    // Action to receive a message (adds to local messages array)
    receiveMessage: (state, action) => {
      state.messages.push(action.payload); // Add the received message to the messages array
    },
    // Action to skip the current chat
    chatSkipped: (state) => {
      state.isConnecting = false; // Reset connecting state
      state.isConnected = false;  // Disconnect
      state.partner = null;       // Clear partner info
      state.messages = [];        // Clear all messages
    },
  },
});

// Export the actions generated by createSlice
export const { setNickname, startChat, partnerFound, noPartner, sendMessage, receiveMessage, chatSkipped } = anonymousChatSlice.actions;

// Export the reducer function for this slice
export default anonymousChatSlice.reducer;
